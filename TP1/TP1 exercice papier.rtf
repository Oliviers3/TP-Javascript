{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red36\green41\blue46;}
{\*\expandedcolortbl;;\csgenericrgb\c14118\c16078\c18039;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\ri-386\partightenfactor0

\f0\fs24 \cf0 TP1 :\
\
\pard\pardeftab708\li720\fi-360\ri-386\partightenfactor0
\cf0 1.	La premi\'e8re ligne cr\'e9\'e9e une constante tableau associatif poss\'e9dant : un attribut de classe anagrammes, un attribut classe Stack, un attribut classe spirale, un attribut classe puissance4 et un attribut classe fizzBuzz. Ces classes sont appel\'e9s dans un fichier externe du nom de javascript.js\
\pard\pardeftab708\ri-386\partightenfactor0
\cf0 \
\pard\pardeftab708\li720\fi-360\ri-386\partightenfactor0
\cf0 2.	La fonction expect est une assertion explicite. Les expectations sont construites \'e0 partir de la fonction expect qui prend en argument une valeur. Le tout est suivi d\'92une fonction dite \'93matcher\'94 qui prend en argument la valeur attendue. Elle permet de v\'e9rifier si la classe anagrammes est bien d\'e9fini pour la sixi\'e8me ligne.\
\pard\pardeftab708\ri-386\partightenfactor0
\cf0 \
\pard\pardeftab708\li720\fi-360\ri-386\partightenfactor0
\cf0 3.	toEqual permet une comparaison stricte des valeurs du variable. C\'92est une fonction qui cherche de mani\'e8re r\'e9cursive \'e0 comparer les donn\'e9es les plus profondes entre 2 variables. La m\'e9thodes toEqual poss\'e8de des fonctions similaires tels que \'93toBe\'94 qui sert \'e0 \cf2 comparer des valeurs primitives ou pour v\'e9rifier l'identit\'e9 r\'e9f\'e9rentielle des instances d'objet.\cf0 , ===, ==, Object.is\
\pard\pardeftab708\ri-386\partightenfactor0
\cf0 \
\pard\pardeftab708\li720\fi-360\ri-386\partightenfactor0
\cf0 4.	Il est possible d\'92ex\'e9cuter du code \'93avant\'94 et \'93apr\'e8s\'94 chacune des sp\'e9cifications \'e9crites, respectivement gr\'e2ce aux fonctionnalit\'e9s beforeEach et afterEach. Cela peut devenir pratique si l\'92on veut factoriser du code, ou si l\'92on utilise des variables globales que l\'92on souhaite r\'e9initialiser apr\'e8s un test. La fonction describe() permet de d\'e9buter les tests, elle n\'e9cessite 2 param\'e8tres : une cha\'eene de caract\'e8res et une fonction. La cha\'eene de caract\'e8re repr\'e9sente le titre du test, quant \'e0 la fonction, c\'92est un bloc de code qui impl\'e9mente le test.\uc0\u8232 \
5.	Mock permet de tester des liens entre le code en effa\'e7ant l\'92impl\'e9mentation r\'e9elle de la fonction. Les objets de type mock permettent de simuler le comportement d\'92autres objets. Ils peuvent trouver de nombreuses utilit\'e9s notamment dans les tests unitaires o\'f9 ils permettent de tester le coder en maitrisant le comportement des d\'e9pendances.\
\pard\pardeftab708\ri-386\partightenfactor0
\cf0 \
\pard\pardeftab708\li720\fi-360\ri-386\partightenfactor0
\cf0 6.	La fonction mock permet de cr\'e9er une fonction virtuelle. Cette fonction virtuelle permet de remplacer une vraie fonction (et donc son traitement). Elle permet ainsi de v\'e9rifier si les entr\'e9es saisies sont fonctionnelles ou non sans avoir \'e0 utiliser une v\'e9ritable fonction, pouvant mettre plus de temps \'e0 s\'92effectuer. (Ou pouvant \'eatre inaccessible) \
}